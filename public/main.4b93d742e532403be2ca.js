!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=0)}([function(t,e,n){t.exports=n(7)},function(t,e,n){},function(t,e,n){},function(t,e,n){},function(t,e,n){},function(t,e,n){},function(t,e,n){},function(t,e,n){"use strict";n.r(e);var o,i=function(t){var e=t.slice();return e.sort(function(t,e){return e.apdex-t.apdex}),e=e.slice(0,25)},r=function(t){return'<div data-id="'+t.id+'"></div>'},s=function(){function t(t){this.mountPoint="",this.template=r,this.id=0,this.templateData={},this.setMount(t.selector),this.setTemplate(t.template),this.setID(),this.templateData.id=this.getID()}return t.prototype.init=function(t){void 0===t&&(t={}),this.render(this.templateData)},t.prototype.setTemplate=function(t){this.template=t},t.prototype.setMount=function(t){this.mountPoint=t},t.prototype.render=function(t){void 0===t&&(t={});var e=document.getElementById(this.mountPoint);if(!e)throw new Error("Component mount failed! Cannot find element #"+this.mountPoint+" to mount the app to.");e.insertAdjacentHTML("afterbegin",this.template(t))},t.prototype.setID=function(){this.id=Math.floor(1e4*Math.random())},t.prototype.getID=function(){return this.id},t.prototype.loadData=function(t){return function(t){return new Promise(function(e,n){var o=new XMLHttpRequest;o.open("GET",t),o.setRequestHeader("Accept","application/json"),o.setRequestHeader("Cache-Control","no-cache"),o.onload=function(t){try{var i=JSON.parse(o.responseText);e({status:o.status,statusText:o.statusText,data:i})}catch(t){n("Error while parsing JSON")}},o.onerror=function(t){e({status:o.status,statusText:o.statusText,data:o.statusText})},o.send()})}(t)},t}(),a=(n(1),o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),c=function(t){return'\n        <header class="header" id="Header_'+t.id+'">\n            <div class="header__container">\n                <h1 class="header__title">\n                    <span class="header__titlemain">'+t.title+'</span>\n                    <small class="header__subtitle">'+t.subtitle+'</small>\n                </h1>\n            </div>\n            <div class="header__controls">\n                <label>\n                    <input type="checkbox" name="view" value="grid" id="Checkbox_'+t.id+'" />\n                    <span>Show as list</span>\n                </label>\n            </div>\n        </header>\n    '},p=function(t){function e(e){void 0===e&&(e={});var n=t.call(this,e)||this;return n.template=c,n.title="Header Title Goes Here",n.checkboxElem=null,n.onChange=n.onChange.bind(n),n}return a(e,t),e.prototype.init=function(t){void 0===t&&(t={}),this.templateData.title=t.title||this.title,this.templateData.subtitle=t.subtitle,this.render(this.templateData),this.checkboxElem=document.getElementById("Checkbox_"+this.id),this.initListeners()},e.prototype.initListeners=function(){this.checkboxElem&&this.checkboxElem.addEventListener("change",this.onChange)},e.prototype.onChange=function(t){t.preventDefault(),document.getElementsByClassName("board__cards")[0].classList.toggle("asList")},e}(s),u=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),l=function(t){return'\n        <div class="board" id="Board_'+t.id+'">\n            <div id="board__list" data-id="BoardList_'+t.id+'">\n            </div>\n        <//div>\n    '},d=function(t){function e(e){var n=t.call(this,e)||this;return n.template=l,n.cards=[],n}return u(e,t),e}(s),h=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),f=function(t){return'<li class="list-item" id="ListItem_'+t.id+'">'+t.item+"</li>"},m=function(t){function e(e){var n=t.call(this,e)||this;return n.template=f,n}return h(e,t),e.prototype.init=function(t){this.templateData.item=t.item,this.render(this.templateData)},e}(s),_=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),y=function(t){return'\n        <article class="card" id="Card_'+t.id+'">\n            <h2 class="card__title">'+t.title+'</h2>\n            <ul class="card__list" id="CardList_'+t.id+'"></ul>\n        </article>\n    '},v=function(t){function e(e){void 0===e&&(e={});var n=t.call(this,e)||this;return n.template=y,n.title="Card Title Goes Here",n.childComponents=[],n.list=[],n.templateData.title=e.title,n}return _(e,t),e.prototype.init=function(t){void 0===t&&(t={}),this.list=t.list||[],this.templateData.title=t.title||this.title,this.render(this.templateData),this.initList(t.list,"CardList_"+this.id)},e.prototype.initList=function(t,e,n,o){void 0===n&&(n=m);var i=document.getElementById(e);i&&(i.innerHTML="");for(var r=0,s=0,a=t;s<a.length;s++){var c=a[s];if(null!==o&&r===o)break;var p=new n({selector:e});this.childComponents=Array().concat(this.childComponents,p),p.init({item:c.name,apdex:c.apdex,version:c.version}),r++}},e}(s),b=(n(2),function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}()),C=function(t){return'     \n        <div class="listitem__index">'+t.apdex+'</div>\n        <div class="listitem__name">'+t.item+"</div>\n    "},H=function(t){function e(e){var n=t.call(this,e)||this;return n.template=C,n.element=null,n.version=0,n.item="",n.onClick=n.onClick.bind(n),n}return b(e,t),e.prototype.init=function(t){this.version=t.version,this.item=t.item,this.templateData.apdex=t.apdex,this.templateData.item=t.item,this.render(this.templateData),this.initListeners()},e.prototype.render=function(t){void 0===t&&(t={});var e=document.getElementById(this.mountPoint);if(!e)throw new Error("Component mount failed! Cannot find element #"+this.mountPoint+" to mount the app to.");this.element=document.createElement("li"),this.element.id="ApplicationItem_"+t.id,this.element.className="listitem--application",this.element.insertAdjacentHTML("afterbegin",this.template(t)),e.appendChild(this.element)},e.prototype.onClick=function(t){t.preventDefault(),alert(this.item+"\nRelease version: "+this.version)},e.prototype.initListeners=function(){this.element&&this.element.addEventListener("click",this.onClick)},e.prototype.removeListeners=function(){this.element&&this.element.removeEventListener("click",this.onClick)},e}(m),O=(n(3),function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}()),w=function(t){return'\n        <article class="card card--host" id="HostCard_'+t.id+'">\n            <h2 class="card__title">'+t.title+'</h2>\n            <ul class="card__list" id="HostCardList_'+t.id+'">\n            </ul>\n        </article>\n    '},g=function(t){function e(e){void 0===e&&(e={});var n=t.call(this,e)||this;return n.template=w,n}return O(e,t),e.prototype.init=function(t){void 0===t&&(t={}),this.list=t.list||[],this.templateData.title=t.title||this.title,this.render(this.templateData),this.initList(this.list,"HostCardList_"+this.id,H,5)},e.prototype.updateList=function(t){this.list=t,this.childComponents.forEach(function(t){t.removeListeners()}),this.initList(this.list,"HostCardList_"+this.id,H,5)},e}(v),P=(n(4),function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}()),x=function(t){return'\n        <div class="board board--host" id="HostBoard_'+t.id+'">\n            <div class="board__cards" id="HostBoardCards_'+t.id+'"></div>\n        <//div>\n    '},j=function(t){function e(e){void 0===e&&(e={});var n=t.call(this,e)||this;return n.template=x,n.jsonPath="/data/host-app-data.json",n.data=[],n.appsByHosts={},n.childComponents={},n}return P(e,t),e.prototype.init=function(){var t=this;this.loadData(this.jsonPath).then(function(e){return t.onSuccess(e)},function(e){return t.onError(e)}),this.exposeMethods()},e.prototype.onSuccess=function(t){var e=this;this.data=t.data,this.appsByHosts=function(t){for(var e={},n=0,o=t.length;n<o;n++){var i=t[n],r=t[n].host;if(r.length>0)for(var s=0,a=r.length;s<a;s++){var c=r[s];e.hasOwnProperty(c)?e[c].push(i):e[c]=[i]}}return e}(this.data),this.render(this.templateData),Object.keys(this.appsByHosts).forEach(function(t){var n=new g({selector:"HostBoardCards_"+e.id});e.childComponents["HostCard_"+t]=n,n.init({title:t,list:i(e.appsByHosts[t]).slice()})})},e.prototype.onError=function(t){console.error(t)},e.prototype.exposeMethods=function(){var t=this;window.getTopAppsByHost=function(e){return t.getTopAppsByHost(e)},window.removeAppFromHosts=function(e){return t.removeAppFromHosts(e)},window.addAppToHosts=function(e){return t.addAppToHosts(e)}},e.prototype.getTopAppsByHost=function(t){(void 0===t&&(t=""),t&&"string"==typeof t)?this.appsByHosts.hasOwnProperty(t)?i(this.appsByHosts[t]).forEach(function(t,e){console.log(e+1+". "+t.name+" ("+t.apdex+")\n")}):console.error('No host was found with name "'+t+'"!'):console.error("Can't retrieve top apps! Please provide a host name.")},e.prototype.removeAppFromHosts=function(t){var e=this;if(t&&"string"==typeof t){var n=[];Object.keys(this.appsByHosts).forEach(function(o){var i=e.appsByHosts[o].reduce(function(e,i,r){return i.name!==t&&e.push(i),i.name===t&&n.push(o),e},[]);e.appsByHosts[o]=i}),n.length?n.forEach(function(t){e.updateCardList(t,i(e.appsByHosts[t]))}):console.info('Could not find any app with the name "'+t+'".')}else console.error("Please provide the application's name you want to remove.")},e.prototype.addAppToHosts=function(t){var e=this;t&&"object"==typeof t?t.name&&t.apdex?t.host&&t.host.length?t.host.forEach(function(n){var o=e.appsByHosts[n];if(o)return e.appsByHosts[n]=o.concat([t]),void e.updateCardList(n,i(e.appsByHosts[n]));e.appsByHosts[n]=[t];var r=new g({selector:"HostBoardCards_"+e.id});e.childComponents["HostCard_"+n]=r,r.init({title:n,list:[t]})}):console.error("Application is missing host(s)."):console.error("Application is missing a name and/or apdex number."):console.error("Cannot add application to hosts.")},e.prototype.updateCardList=function(t,e){var n=this.childComponents["HostCard_"+t];n&&n.updateList(e.slice())},e}(d),A=(n(5),function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}()),L=function(t){return'\n        <section class="app" id="App_'+t.id+'">\n            <div class="app__header" id="AppHeader_'+t.id+'"></div>\n            <main class="app__content" id="AppContent_'+t.id+'"></main>\n            <div class="app__footer" id="AppFooter_'+t.id+'"></div>\n        </section>\n    '},B=function(t){function e(e){var n=t.call(this,e)||this;return n.template=L,n.childComponents={},n.childComponents={Header:new p({selector:"AppHeader_"+n.id}),HostBoard:new j({selector:"AppContent_"+n.id})},n}return A(e,t),e.prototype.init=function(){var t=this;this.render(this.templateData),this.loadUserData().then(function(e){t.childComponents.Header.init({title:e.data.title,subtitle:"for user "+e.data.email})}),this.childComponents.HostBoard.init()},e.prototype.loadUserData=function(){return new Promise(function(t){t({status:200,statusText:"OK",data:{title:"Apps by Host",email:"averylongemailaddress@companyname.com"}})})},e}(s);n(6);new B({selector:"app"}).init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,